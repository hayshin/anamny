services:
  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=anamny_user
      - POSTGRES_PASSWORD=anamny_password
      - POSTGRES_DB=anamny_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U anamny_user -d anamny_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./server:/app
    environment:
      - DATABASE_URL=postgresql://anamny_user:anamny_password@db:5432/anamny_db
      - SECRET_KEY=your-secret-key-change-this-in-production
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  celery:
    build: ./server
    command: sh -c "python -m celery -A src.celery worker --loglevel=info"
    volumes:
      - ./server:/app
    environment:
      - DATABASE_URL=postgresql://anamny_user:anamny_password@db:5432/anamny_db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - db
      - redis
      - server
    networks:
      - app-network

  celery_beat:
    build: ./server
    command: sh -c "python -m celery -A src.celery beat --loglevel=info"
    volumes:
      - ./server:/app
    environment:
      - DATABASE_URL=postgresql://anamny_user:anamny_password@db:5432/anamny_db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - db
      - redis
      - server
    networks:
      - app-network

  client:
    build:
      context: ./client
    ports:
      - "8081:8081" # Expose Expo dev server
      - "19000:19000" # Optional: Expo Metro Bundler
      - "19001:19001" # Optional: Expo debugger
      - "19002:19002" # Optional: Expo web UI
    volumes:
      - ./client:/app
      - /app/node_modules # Prevent overwriting node_modules inside container
    environment:
      - EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0
      - EXPO_PUBLIC_API_URL=http://localhost:8000
    stdin_open: true
    tty: true
    depends_on:
      - server
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
